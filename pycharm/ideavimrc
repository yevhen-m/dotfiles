let mapleader=","

""" Plugins  --------------------------------
set matchit
set surround
set nerdtree
set easymotion
set multiple-cursors
set commentary
set argtextobj
set textobj-entire
set textobj-indent
set vim-paragraph-motion
set ReplaceWithRegister
set highlightedyank
set exchange
set quickscope

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>,{:}"
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

""" Common settings -------------------------
set clipboard+=ideaput
set clipboard+=unnamed
set gdefault
set hlsearch
set ignorecase
set incsearch
set number
set scrolloff=5
set showmode
set sidescrolloff=5
set smartcase
set visualbell

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=select
set ideavimsupport=

""" Mappings --------------------------------
" To copy text to the end-of-line, press Y.
" This mapping sets up Y to be consistent with
" the C and D operators, which act from the cursor
" to the end of the line. The default behavior of Y
" is to yank the whole line.
nnoremap Y y$

nnoremap 0 ^
nnoremap ^ 0

inoremap <C-a> <C-o>^
inoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-p> <Up>
inoremap <C-n> <Down>
cnoremap <C-f> <Right>
inoremap <C-b> <Left>
cnoremap <C-b> <Left>
inoremap <C-d> <Del>
cnoremap <C-d> <Del>
inoremap <C-k> <C-o>D<Right>

nnoremap <Space> :nohlsearch<CR>
inoremap <Esc> <Esc>:nohlsearch<cr>l
inoremap <S-BS> <BS>

" EasyMotion mappings
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-f2)
xmap s <Plug>(easymotion-f2)
omap s <Plug>(easymotion-f2)
nmap S <Plug>(easymotion-F2)
xmap S <Plug>(easymotion-F2)
omap S <Plug>(easymotion-F2)

nmap gd <Action>(GotoDeclaration)
nmap gh <Action>(ShowHoverInfo)
nmap gD <Action>(GotoTypeDeclaration)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>u <Action>(FindUsages)
nmap ]q <Action>(NextOccurence)
nmap [q <Action>(PreviousOccurence)

nmap <C-r> <Action>(Rerun)
nnoremap U <C-r>

" When in normal mode and I hit Enter, then save file please
nmap <CR> :nohl \| action ReformatCode \| write<CR>

" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-g> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences

nmap <C-w><c-\> <Action>(SplitVertically)
nmap <C-w>\ <Action>(SplitVertically)
nmap <C-w>' <Action>(SplitVertically)
nmap <C-w><c--> <Action>(SplitHorizontally)
nmap <C-w>- <Action>(SplitHorizontally)
" Yes, the double quote should be without a backslash here
nmap <C-w>" <Action>(SplitHorizontally)
nmap <C-w><c-m> <Action>(MoveEditorToOppositeTabGroup)
nmap <C-w>m <Action>(MoveEditorToOppositeTabGroup)
nmap <C-w><c-=> <Action>(Unsplit)
nmap <C-w>= <Action>(Unsplit)
nmap <C-w>o <Action>(HideActiveWindow)
nmap <C-w><C-o> <Action>(HideActiveWindow)

sethandler <c-j> a:vim
sethandler <c-k> a:vim
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k

vnoremap < <gv
vnoremap > >gv

nmap ]e <Action>(GotoNextError)
nmap [e <Action>(GotoPreviousError)

nmap ]h <Action>(VcsShowNextChangeMarker)
nmap [h <Action>(VcsShowPrevChangeMarker)

" Marks. Use mM to set a mark, then MM to go to that mark.
nnoremap M `
nmap md <Action>(ToggleBookmark)

" Focus project window
nmap - <Action>(ActivateProjectToolWindow)
nmap <leader>nr :NERDTreeFind<CR>
nmap <leader>nc :NERDTreeClose<CR>

" Insert empty lines around the current line
nnoremap [<Space> O<Esc>j
nnoremap ]<Space> o<Esc>k

" Move in insert mode
nnoremap <A-k> :m .-2<CR>==
nnoremap <A-j> :m .+1<CR>==
inoremap <A-k> <Esc>:m .-2<CR>==gi
inoremap <A-j> <Esc>:m .+1<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Save
nnoremap <leader><leader> :write<CR>

" Switch buffers
nnoremap H :tabprevious<CR>
nnoremap [b :tabprevious<CR>
nnoremap L :tabnext<cr>
nnoremap ]b :tabnext<cr>
nmap <leader>bo <Action>(CloseAllEditorsButActive)
nnoremap <leader>bd :bdelete<CR>

" Use backslash to jump to the previous match
nnoremap \\ ,

nmap g; <Action>(JumpToLastChange)
nmap g, <Action>(JumpToNextChange)
